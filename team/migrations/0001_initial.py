# Generated by Django 4.2.6 on 2023-11-13 07:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=40)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('city', models.CharField(blank=True, max_length=40, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('telephone', models.CharField(blank=True, max_length=40, null=True)),
                ('json_with_settings_info', models.JSONField(blank=True, default=dict)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
                'unique_together': {('password', 'username')},
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('employees', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('owner_id', models.IntegerField(help_text='Тут будет храниться id создателя компании(т. е. того человека, который будет платить)')),
                ('json_with_department_info', models.JSONField(blank=True, default=dict)),
                ('json_with_settings_info', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('supervisor', models.IntegerField()),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.company')),
                ('parent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='team.department')),
            ],
            options={
                'ordering': ['company_id', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('view_counter', models.IntegerField(choices=[(1, 'Absolute'), (2, 'Partial'), (3, 'In_percentages'), (4, 'None_display')], default=4)),
                ('json_info_with_access_level', models.JSONField(blank=True, default=dict)),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.company')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('status', models.IntegerField(choices=[(1, 'Accepted'), (2, 'Work'), (3, 'Inspection'), (4, 'Revision')], default=2)),
                ('json_with_employee_info', models.JSONField(blank=True, default=dict)),
                ('json_with_task_info', models.JSONField(blank=True, default=dict)),
                ('parent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='team.task')),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.project')),
            ],
            options={
                'ordering': ['project_id', 'title'],
            },
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.IntegerField()),
                ('project_personal_notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='UserProjectTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_with_time_and_name_info', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Customization',
            fields=[
                ('customisation_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('color_scheme', models.CharField(default='', max_length=40)),
                ('font_size', models.CharField(default='', max_length=40)),
                ('background', models.CharField(default='', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='UserProjectTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('task_personal_notes', models.JSONField(blank=True, default=dict)),
                ('json_with_subtask_and_subtask_personal_not', models.JSONField(blank=True, default=dict)),
                ('task_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.task')),
                ('user_project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.userproject')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Subtasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('status_yes_no', models.BooleanField(default=False)),
                ('json_with_subtask_info', models.JSONField(blank=True, default=dict)),
                ('task_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.task')),
            ],
            options={
                'ordering': ['task_id', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Positions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('weight', models.SmallIntegerField(choices=[(1, 'Full access'), (2, 'Partial access'), (3, 'Observer')], default=2)),
                ('json_with_optional_info', models.JSONField(blank=True, default=dict)),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.company')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('is_read', models.BooleanField(default=False)),
                ('json_with_content', models.JSONField(blank=True, default=dict)),
                ('chat_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.chat')),
                ('employee_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LinksResources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('employee_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_with_employee_info', models.JSONField(blank=True, default=dict)),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='team.company')),
                ('department_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='team.department')),
                ('employee_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('position_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='team.positions')),
            ],
            options={
                'indexes': [models.Index(fields=['company_id', 'employee_id'], name='team_employ_company_87227e_idx')],
            },
        ),
    ]
