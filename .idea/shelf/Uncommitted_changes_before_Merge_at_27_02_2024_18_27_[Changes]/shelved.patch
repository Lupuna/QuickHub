Index: team/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\r\nfrom django.views.generic.edit import FormView\r\nfrom django.views.generic import ListView, DetailView\r\nfrom django.urls import reverse_lazy, reverse\r\nfrom django.shortcuts import render, redirect\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\nfrom . import models\r\n\r\ncreator = 'team/main_functionality/includes/creator.html'\r\n\r\n\r\nclass MultipleFileInput(forms.ClearableFileInput):\r\n    allow_multiple_selected = True\r\n\r\n\r\nclass MultipleImageField(forms.ImageField):\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs.setdefault(\"widget\", MultipleFileInput())\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def clean(self, data, initial=None):\r\n        single_file_clean = super().clean\r\n        if isinstance(data, (list, tuple)):\r\n            result = [single_file_clean(d, initial) for d in data]\r\n        else:\r\n            result = single_file_clean(data, initial)\r\n        return result\r\n\r\n\r\nclass MultipleFileField(forms.FileField):\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs.setdefault(\"widget\", MultipleFileInput())\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def clean(self, data, initial=None):\r\n        single_file_clean = super().clean\r\n        if isinstance(data, (list, tuple)):\r\n            result = [single_file_clean(d, initial) for d in data]\r\n        else:\r\n            result = single_file_clean(data, initial)\r\n        return result\r\n\r\n\r\nclass ModifiedDispatch:\r\n    def dispatch(self, request, *args, **kwargs):\r\n        try:\r\n            if self.kwargs.get('company_id'):\r\n                self.kwargs['company'] = models.Company.objects.get(id=self.kwargs['company_id'])\r\n            if self.kwargs.get('project_id'):\r\n                self.kwargs['project'] = models.Project.objects.get(id=self.kwargs['project_id'])\r\n            if self.kwargs.get('task_id'):\r\n                self.kwargs['task'] = models.Task.objects.get(id=self.kwargs['task_id'])\r\n        except ObjectDoesNotExist:\r\n            return redirect(reverse_lazy('team:homepage'))\r\n\r\n        return super().dispatch(request, *args, **kwargs)\r\n    \r\n    def get_context_data(self, *args, **kwargs):\r\n        context = super().get_context_data(*args, **kwargs)\r\n        context['company'] = self.kwargs.get('company')\r\n        context['project'] = self.kwargs.get('project')\r\n        context['task'] = self.kwargs.get('task')\r\n        return context\r\n    \r\n\r\nclass CreatorMixin:\r\n    def __init__(self, *args, **kwargs):\r\n        self.template_name = creator\r\n        self.success_url = reverse_lazy('team:homepage')\r\n        self.login_url = reverse_lazy('team:login')\r\n        self.extra_context = {'title': f'QuickHub: {self.__class__.__name__.replace(\"Create\", \"\")}-create'}\r\n\r\n\r\ndef create_base_settings_json_to_employee():\r\n    js = {\r\n        \"settings_info_about_company_employee\": [\"image\", \"name\", \"email\", \"telephone\", \"position_title\"]\r\n    }\r\n    return js\r\n\r\n\r\ndef create_employee_list(company_id: int) -> list:\r\n    # return models.Employee.objects.filter(\r\n    #     id__in=models.EmployeeCompany.objects.filter(company_id=company_id).values('employee_id'))\r\n    return company_id.employees.distinct()\r\n\r\n\r\ndef add_new_employee(company_id, employee_id):\r\n    company_id = models.Company.objects.get(id=company_id)\r\n    employee_id = models.Employee.objects.get(id=employee_id)\r\n    new_employee = models.EmployeeCompany(company_id=company_id, employee_id=employee_id)\r\n    new_employee.save()\r\n\r\n\r\ndef set_position(employee_id, company_id, position_id):\r\n    user = models.Employee.objects.get(id=employee_id)\r\n    position = models.Positions.objects.get(id=position_id)\r\n    company = models.Company.objects.get(id=company_id)\r\n    employee = models.EmployeeCompany.objects.get(employee_id=user, company_id=company)\r\n    employee.position_id = position\r\n    employee.save()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/utils.py b/team/utils.py
--- a/team/utils.py	(revision b699e167c5f81724009b3a307307f24fbe1a7fc0)
+++ b/team/utils.py	(date 1709033237062)
@@ -97,4 +97,5 @@
     company = models.Company.objects.get(id=company_id)
     employee = models.EmployeeCompany.objects.get(employee_id=user, company_id=company)
     employee.position_id = position
-    employee.save()
\ No newline at end of file
+    employee.save()
+
