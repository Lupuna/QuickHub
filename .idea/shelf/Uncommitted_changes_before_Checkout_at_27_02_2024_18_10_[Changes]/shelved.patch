Index: team/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth import login, logout, authenticate\r\nfrom django.views.generic import ListView, DetailView\r\nfrom django.views.generic.edit import FormView\r\nfrom django.urls import reverse_lazy, reverse\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\nfrom django.db.models import Q\r\nfrom django.db import IntegrityError\r\nfrom . import forms, models, utils, permissions\r\n\r\n\r\nclass CreateCompany(utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.CompanyCreationForm\r\n\r\n    def form_valid(self, form):\r\n        company = form.save(commit=False)\r\n        company.owner_id = self.request.user.id\r\n        company.save()\r\n        utils.add_new_employee(company.id, self.request.user.id)\r\n        return super().form_valid(company)\r\n\r\n\r\nclass CreateProject(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.ProjectCreationForm\r\n\r\n    def form_valid(self, form):\r\n        project = form.save(commit=False)\r\n        project.project_creater = self.request.user.id\r\n        project.company_id = self.kwargs['company']\r\n        form.save()\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateTask(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.TaskCreationForm\r\n\r\n    def dispatch(self, request, *args, **kwargs):\r\n        try:\r\n            self.kwargs['user'] = models.Employee.objects.get(id=self.request.user.id)\r\n        except ObjectDoesNotExist:\r\n            return redirect(reverse_lazy('team:homepage'))\r\n\r\n        return super().dispatch(request, *args, **kwargs)\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        kwargs['project_id'] = self.kwargs['project']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        task = models.Task()\r\n        task.json_with_employee_info = {\r\n            'appoint': [self.kwargs['user'].email],\r\n            'responsible': [i.email for i in form.cleaned_data.get('responsible')],\r\n            'executor': [i.email for i in form.cleaned_data.get('executor')]\r\n        }\r\n        task.project_id = self.kwargs['project']\r\n        task.text = form.cleaned_data.get('text')\r\n        task.title = form.cleaned_data.get('title')\r\n        task.save()\r\n\r\n        self.kwargs['user'].tasks.add(task)\r\n\r\n        for f in self.request.FILES.getlist('files'): models.TaskFile.objects.create(file=f, task_id=task)\r\n        for i in self.request.FILES.getlist('images'): models.TaskImage.objects.create(image=i, task_id=task)\r\n        return super().form_valid(task)\r\n\r\n\r\nclass CreateSubtask(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.SubtaskCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        subtask = models.Subtasks()\r\n        subtask.json_with_employee_info = {\r\n            'appoint': [self.request.user.email],\r\n            'responsible': [i.email for i in form.cleaned_data.get('responsible')],\r\n            'executor': [i.email for i in form.cleaned_data.get('executor')]\r\n        }\r\n        subtask.task_id_id = self.kwargs['task_id']\r\n        subtask.text = form.cleaned_data.get('text')\r\n        subtask.title = form.cleaned_data.get('title')\r\n        subtask.save()\r\n        for f in self.request.FILES.getlist('files'): models.SubtaskFile.objects.create(file=f, subtask_id=subtask)\r\n        for i in self.request.FILES.getlist('images'): models.SubtaskImage.objects.create(image=i, subtask_id=subtask)\r\n        return super().form_valid(subtask)\r\n\r\n\r\nclass ChoiceParameters(permissions.CompanyAccess, FormView):\r\n    login_url = reverse_lazy('team:login')\r\n    template_name = 'team/main_functionality/choice_parameters.html'\r\n    form_class = forms.ChoiceEmployeeParametersForm\r\n\r\n    def get_success_url(self):\r\n        return reverse_lazy('team:check_employee', kwargs={'company_id': self.kwargs['company_id']})\r\n\r\n    def form_valid(self, form):\r\n        self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"] = []\r\n        for item, flag in form.cleaned_data.items():\r\n            if flag: self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"].append(item)\r\n            self.request.user.save()\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateCategory(utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.CategoryCreationForm\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.success_url = reverse_lazy('team:taskboard')\r\n\r\n    def form_valid(self, form):\r\n        try:\r\n            category = form.save(commit=False)\r\n            category.title = form.cleaned_data.get('title')\r\n            category.employee_id = models.Employee.objects.get(id=self.request.user.id)\r\n            category.project_personal_notes = form.cleaned_data.get('project_personal_notes')\r\n            category.save()\r\n        except:\r\n            return redirect(reverse_lazy('team:create_category'))\r\n        return super().form_valid(category)\r\n\r\n\r\nclass CreatePosition(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.PositionCreationForm\r\n\r\n    def form_valid(self, form):\r\n        position = form.save(commit=False)\r\n        position.company_id = self.kwargs['company']\r\n        position.json_with_optional_info = {'text': form.cleaned_data.get('text')}\r\n        position.save()\r\n        return super().form_valid(position)\r\n\r\n\r\nclass CreateCompanyEvent(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.CompanyEventCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        company_event = models.CompanyEvent()\r\n        company_event.company = self.kwargs['company']\r\n        company_event.title = form.cleaned_data.get('title')\r\n        company_event.description = form.cleaned_data.get('description')\r\n        company_event.json_with_employee_info = {\r\n            'present_employees': [employee.email for employee in form.cleaned_data.get('present_employees')]\r\n        }\r\n        company_event.time_end = form.cleaned_data.get('time_end')\r\n        company_event.time_start = form.cleaned_data.get('time_start')\r\n        company_event.save()\r\n\r\n        for f in self.request.FILES.getlist('files'): models.CompanyEventFile.objects.create(file=f,\r\n                                                                                             company_event=company_event)\r\n        for i in self.request.FILES.getlist('images'): models.CompanyEventImage.objects.create(image=i,\r\n                                                                                               company_event=company_event)\r\n\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateDepartment(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.DepartmentCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        department = models.Department()\r\n        try:\r\n            department.company_id = self.kwargs['company']\r\n            department.title = form.cleaned_data.get('title')\r\n            department.parent_id = form.cleaned_data.get('parent')\r\n            department.supervisor = form.cleaned_data.get('supervisor')\r\n            department.save()\r\n        except IntegrityError:\r\n            return redirect('team:create_department',\r\n                            company_id=self.kwargs['company_id'])\r\n\r\n        employees = list(form.cleaned_data.get('employees'))\r\n        if not department.supervisor in employees:\r\n            employees += [department.supervisor]\r\n\r\n        for employee in employees:\r\n            employee_company = models.EmployeeCompany.objects \\\r\n                .filter(employee_id=employee,\r\n                        company_id=self.kwargs['company'])\r\n            # т.к. on_delete=models.SET_NULL, то при удалении департамента может возникнуть много\r\n            # записей об одном работнике с пустыми полями отдела\r\n            employee_without_department = employee_company.filter(department_id=None)\r\n            if employee_without_department:\r\n                employee_without_department[\r\n                    0].department_id = department  # если есть запись о работнике с незаполненным полем отдела,\r\n                employee_without_department[0].save()  # тогда просто заполняется поле отдела в уже существующей записи\r\n            else:\r\n                employee_company = models.EmployeeCompany()\r\n                employee_company.company_id = self.kwargs['company']\r\n                employee_company.employee_id = employee\r\n                employee_company.department_id = department  # если же во всех записях работник уже прикреплён к отделу,\r\n                employee_company.save()  # создаётся новая запись в таблице EmployeeCompany\r\n        return super().form_valid(department)\r\n\r\n\r\nclass CreateTaskboard(utils.ModifiedDispatch, utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.TaskboardCreationForm\r\n\r\n    def dispatch(self, request, *args, **kwargs):\r\n        try:\r\n            self.kwargs['user'] = models.Employee.objects.get(id=self.request.user.id)\r\n        except ObjectDoesNotExist:\r\n            return redirect(reverse_lazy('team:homepage'))\r\n        return super().dispatch(request, *args, **kwargs)\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['emp_id'] = self.kwargs['user'].id\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        tasks = self.kwargs['user'].tasks \\\r\n            .filter(id__in=form.cleaned_data.get('tasks'))\r\n        category = form.cleaned_data.get('category')\r\n\r\n        for task in tasks:\r\n            taskboard = models.Taskboard(category_id=category,\r\n                                         task_id=task,\r\n                                         title=category.title,\r\n                                         task_personal_notes={\r\n                                             'notes': form.cleaned_data.get('text'),\r\n                                             'task_notes': task.text\r\n                                         })\r\n            subtasks = task.subtasks.all()\r\n            for subtask in subtasks:\r\n                taskboard.json_with_subtask_and_subtask_personal_note[subtask.id] = subtask.text\r\n            taskboard.save()\r\n        return super().form_valid(form)\r\n\r\n\r\n'''Классы отображений'''\r\n\r\n\r\nclass CheckEmployee(utils.ModifiedDispatch, permissions.CompanyAccess, ListView):\r\n    template_name = 'team/main_functionality/view_company_employees.html'\r\n    model = models.Employee\r\n    paginate_by = 10\r\n    login_url = reverse_lazy('team:login')\r\n\r\n    def get_queryset(self):\r\n        info_filter_about_employee = self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"]\r\n        # employees = models.Employee.objects.filter(\r\n        #     id__in=models.EmployeeCompany.objects.filter(company_id=self.kwargs['company_id']).values('employee_id'))\r\n        company = self.kwargs['company']\r\n        employees = company.employees.distinct()\r\n\r\n        info_about_employees = []\r\n        for employee in employees:\r\n            info_about_employee = dict(\r\n                filter(lambda x: x[0] in info_filter_about_employee, employee.get_all_info().items()))\r\n            for link in employee.links.distinct():\r\n                if link.title in info_filter_about_employee:\r\n                    info_about_employee.update(link.get_info())\r\n\r\n            if 'position_title' in info_filter_about_employee:\r\n                # position = models.Positions.objects.filter(\r\n                #     id__in=models.EmployeeCompany.objects.filter(Q(employee_id=employee.id) & Q(company_id= self.kwargs['company_id'])))\r\n                position = employee.positions.filter(company_id=company)\r\n                if position:\r\n                    position = position[0].title\r\n                else:\r\n                    position = None\r\n                info_about_employee.update({'position_title': position})\r\n\r\n            if 'department' in info_filter_about_employee:\r\n                # department = models.Department.objects.filter(\r\n                #     id__in=models.EmployeeCompany.objects.filter(Q(employee_id=employee.id) & Q(company_id=self.kwargs['company_id']))\r\n                # )\r\n                department = employee.departments.filter(company_id=company)\r\n                if department:\r\n                    department = department[0].title\r\n                else:\r\n                    department = None\r\n                info_about_employee.update({'department': department})\r\n\r\n            info_about_employees.append(info_about_employee)\r\n        # paginator = Paginator(info_about_employees, 1)\r\n        # page_number = self.request.GET.get('page')\r\n        # page_obj = paginator.get_page(page_number)\r\n        return info_about_employees\r\n\r\n\r\nclass TaskboardListView(LoginRequiredMixin, ListView):\r\n    model = models.Employee\r\n    template_name = 'team/main_functionality/taskboard.html'\r\n\r\n\r\nclass ProjectsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Project\r\n    template_name = 'team/main_functionality/projects.html'\r\n    context_object_name = 'projects'\r\n\r\n    def get_queryset(self):\r\n        return self.kwargs['company'].projects.all()\r\n\r\n\r\nclass DepartmentsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Department\r\n    template_name = 'team/main_functionality/departments.html'\r\n    context_object_name = 'departments'\r\n\r\n    def get_queryset(self):\r\n        return self.kwargs['company'].departments.all()\r\n\r\n\r\nclass PositionsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Positions\r\n    template_name = 'team/main_functionality/view_positions.html'\r\n    context_object_name = 'positions'\r\n\r\n    def get_queryset(self):\r\n        return self.kwargs['company'].positions.all()\r\n\r\n\r\nclass UserCompaniesListView(utils.ModifiedDispatch, LoginRequiredMixin, ListView):\r\n    model = models.Company\r\n    template_name = 'team/main_functionality/user_companies.html'\r\n    context_object_name = 'companies'\r\n\r\n    def get_queryset(self):\r\n        return self.request.user.companies.distinct()\r\n\r\n\r\nclass DepartmentDetailView(permissions.CompanyAccess, DetailView):\r\n    model = models.Department\r\n    template_name = 'team/main_functionality/view_department.html'\r\n    context_object_name = 'department'\r\n    pk_url_kwarg = 'department_id'\r\n\r\n\r\nclass TaskDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Task\r\n    template_name = 'team/main_functionality/view_task.html'\r\n    context_object_name = 'task'\r\n    pk_url_kwarg = 'task_id'\r\n\r\n\r\nclass SubtaskDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Subtasks\r\n    template_name = 'team/main_functionality/view_subtask.html'\r\n    context_object_name = 'subtask'\r\n    pk_url_kwarg = 'subtask_id'\r\n\r\n\r\nclass ProjectDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Project\r\n    template_name = 'team/main_functionality/view_project.html'\r\n    context_object_name = 'project'\r\n    pk_url_kwarg = 'project_id'\r\n\r\n\r\ndef sign_up(request):\r\n    if request.method == 'POST':\r\n        form = forms.CustomUserCreationFrom(request.POST)\r\n        if form.is_valid():\r\n            user = form.save()\r\n            user.json_with_settings_info = utils.create_base_settings_json_to_employee()\r\n            user.save()\r\n\r\n            models.Category.objects.create(title='Мои задачи', employee_id=user)\r\n            login(request, user)\r\n            return redirect(reverse_lazy('team:homepage'))\r\n    else:\r\n        form = forms.CustomUserCreationFrom()\r\n\r\n    context = {'form': form}\r\n    return render(request, 'registration/sign_up.html', context)\r\n\r\n\r\n@login_required(login_url=reverse_lazy('team:login'))\r\ndef homepage(request):\r\n    return render(request, 'team/main_functionality/homepage.html')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/views.py b/team/views.py
--- a/team/views.py	(revision 2e55cf822a35442111aa0b17c45067d061852431)
+++ b/team/views.py	(date 1708942134790)
@@ -60,6 +60,7 @@
         task.project_id = self.kwargs['project']
         task.text = form.cleaned_data.get('text')
         task.title = form.cleaned_data.get('title')
+        task.status = models.Project.objects.get(pk=self.kwargs['project'].pk).get_default_task_status
         task.save()
 
         self.kwargs['user'].tasks.add(task)
@@ -292,9 +293,6 @@
                 info_about_employee.update({'department': department})
 
             info_about_employees.append(info_about_employee)
-        # paginator = Paginator(info_about_employees, 1)
-        # page_number = self.request.GET.get('page')
-        # page_obj = paginator.get_page(page_number)
         return info_about_employees
 
 
Index: QuickHub/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for QuickHub project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.1.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\r\n\"\"\"\r\nimport os\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-p_7t-xa1ehab$xt66+n%!yczb!0r(dernm%r)u_-qsundk9-%e'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    # 'daphne',\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    # 'channels',\r\n    'team.apps.TeamConfig',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'QuickHub.urls'\r\n\r\nPASSWORD_HASHERS = [\r\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\r\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\r\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\r\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\r\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\r\n]\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'QuickHub.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\nAUTH_USER_MODEL = 'team.Employee'\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# STATICFILES_DIRS = [\r\n#     os.path.join(BASE_DIR, \"static\"),\r\n# ]\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nLOGIN_REDIRECT_URL = '/team'\r\nLOGOUT_REDIRECT_URL = '/team'\r\n\r\nASGI_APPLICATION = \"QuickHub.asgi.application\"\r\n# CHANNEL_LAYERS = {\r\n#     'default': {\r\n#         'BACKEND': 'channels_redis.core.RedisChannelLayer',\r\n#         'CONFIG': {\r\n#             'hosts': [{'127.0.0.1', 6379}]\r\n#         },\r\n#     },\r\n# }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/QuickHub/settings.py b/QuickHub/settings.py
--- a/QuickHub/settings.py	(revision 2e55cf822a35442111aa0b17c45067d061852431)
+++ b/QuickHub/settings.py	(date 1708941237810)
@@ -38,6 +38,7 @@
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
+    'debug_toolbar',
     # 'channels',
     'team.apps.TeamConfig',
 ]
@@ -50,6 +51,7 @@
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    "debug_toolbar.middleware.DebugToolbarMiddleware",
 ]
 
 ROOT_URLCONF = 'QuickHub.urls'
@@ -110,6 +112,10 @@
     },
 ]
 
+INTERNAL_IPS = [
+    "127.0.0.1",
+]
+
 AUTH_USER_MODEL = 'team.Employee'
 
 # Internationalization
Index: team/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import AbstractUser\r\nfrom django.db import models\r\nfrom django.urls import reverse\r\nfrom . import utils\r\n\r\n\r\nclass Employee(AbstractUser):\r\n    name = models.CharField(max_length=40)\r\n    email = models.EmailField(unique=True)\r\n    city = models.CharField(max_length=40, blank=True, null=True)\r\n    birthday = models.DateField(blank=True, null=True)\r\n    telephone = models.CharField(max_length=40, blank=True, null=True)\r\n    online_status = models.BooleanField(default=False)\r\n    json_with_settings_info = models.JSONField(blank=True, default=dict)\r\n    image = models.ImageField(upload_to='images/%Y/%m/%d/%H/', blank=True)\r\n\r\n    tasks = models.ManyToManyField('Task', blank=True, related_name='executors')\r\n    positions = models.ManyToManyField('Positions', through='EmployeeCompany', related_name='employees')\r\n    departments = models.ManyToManyField('Department', through='EmployeeCompany', related_name='employees')\r\n    companies = models.ManyToManyField('Company', through='EmployeeCompany', related_name='employees')\r\n\r\n    def get_all_info(self):\r\n        information = {\r\n            'image': self.image,\r\n            'name': self.name,\r\n            'email': self.email,\r\n            'city': self.city,\r\n            'birthday': self.birthday,\r\n            'telephone': self.telephone,\r\n            'online': self.online_status,\r\n        }\r\n        return information\r\n\r\n    class Meta:\r\n        ordering = ['username']\r\n        unique_together = ['password', 'username']\r\n\r\n    def __str__(self):\r\n        return self.email\r\n\r\n\r\nclass LinksResources(models.Model):\r\n    employee_id = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='links')\r\n    title = models.CharField(max_length=200)\r\n    link = models.URLField(max_length=200)\r\n\r\n    def get_info(self):\r\n        return {self.title: self.link}\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'employee_id'\r\n\r\n\r\nclass Company(models.Model):\r\n    title = models.CharField(max_length=250)\r\n    owner_id = models.IntegerField(\r\n        help_text='Тут будет храниться id создателя компании(т. е. того человека, который будет платить)')\r\n\r\n    class Meta:\r\n        ordering = ['title']\r\n\r\n    def __str__(self):\r\n        return f'{self.owner_id}, {self.title}'\r\n\r\n\r\nclass Department(models.Model):\r\n    company_id = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='departments')\r\n    parent_id = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True, related_name='childs')\r\n    title = models.CharField(max_length=40)\r\n    supervisor = models.ForeignKey(Employee, on_delete=models.CASCADE)\r\n\r\n    class Meta:\r\n        ordering = ['company_id', 'title']\r\n        unique_together = ['company_id', 'title']\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('team:department', kwargs={'company_id': self.company_id.id,\r\n                                                  'department_id': self.id})\r\n\r\n\r\nclass Positions(models.Model):\r\n    # В бедующем его нужно будет заменить на Json файл с очень точной настройкой каждой должности,\r\n    # но это уже после создания большей части функционала (это про weight)\r\n    class Weight(models.IntegerChoices):\r\n        FULL_ACCESS = 1, 'Full access'\r\n        PARTIAL_ACCESS = 2, 'Partial access'\r\n        OBSERVE = 3, 'Observer'\r\n\r\n    company_id = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='positions')\r\n    title = models.CharField(max_length=40)\r\n    weight = models.SmallIntegerField(choices=Weight.choices, default=Weight.PARTIAL_ACCESS)\r\n    json_with_optional_info = models.JSONField(blank=True, default=dict)\r\n\r\n    class Meta:\r\n        unique_together = ['company_id', 'title']\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n\r\nclass Project(models.Model):\r\n    class DisplayTypes(models.IntegerChoices):\r\n        ABSOLUTE = 1, 'Absolute'\r\n        PARTIAL = 2, 'Partial'\r\n        IN_PERCENTAGES = 3, 'In_percentages'\r\n        NONE_DISPLAY = 4, 'None_display'\r\n\r\n    company_id = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='projects')\r\n    title = models.CharField(max_length=40)\r\n    project_creater = models.IntegerField()\r\n    view_counter = models.IntegerField(choices=DisplayTypes.choices, default=DisplayTypes.NONE_DISPLAY)\r\n    json_info_with_access_level = models.JSONField(blank=True, default=dict)\r\n    task_status = models.JSONField(default=utils.get_task_status)\r\n\r\n    class Meta:\r\n        ordering = ['title']\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self._default_task_status = 'Work'\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('team:project', kwargs={'company_id': self.company_id.id,\r\n                                               'project_id': self.id})\r\n\r\n    @property\r\n    def get_default_task_status(self):\r\n        return self._default_task_status\r\n\r\n    @get_default_task_status.setter\r\n    def get_default_task_status(self, new_status):\r\n        if new_status in self.task_status['status']:\r\n            self._default_task_status = new_status\r\n\r\n    def update_task_status(self, new_satus: list):\r\n        if new_satus[-1] not in self.task_status['status'].values():\r\n            self.task_status['status'][new_satus[0]] = new_satus[-1]\r\n\r\n    def delete_task_status(self, to_delete: str):\r\n        if to_delete in self.task_status['status'].keys():\r\n            del self.task_status['status'][to_delete]\r\n\r\n\r\nclass EmployeeCompany(models.Model):\r\n    company_id = models.ForeignKey(Company, on_delete=models.CASCADE)\r\n    employee_id = models.ForeignKey(Employee, on_delete=models.CASCADE)\r\n    # возможно models.SET_NULL не лучшая идея\r\n    position_id = models.ForeignKey(Positions, on_delete=models.SET_NULL, null=True, blank=True)\r\n    department_id = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, blank=True)\r\n\r\n    class Meta:\r\n        indexes = [\r\n            models.Index(fields=['company_id', 'employee_id'])\r\n        ]\r\n\r\n\r\nclass Chat(models.Model):\r\n    title = models.CharField(max_length=250)\r\n    employees = models.ManyToManyField(Employee, related_name='chats')\r\n\r\n    class Meta:\r\n        ordering = ['title']\r\n\r\n\r\nclass Message(models.Model):\r\n    chat_id = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='messages')\r\n    employee_id = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='messages')\r\n    last_update = models.DateTimeField(auto_now=True)\r\n    is_read = models.BooleanField(default=False)\r\n    json_with_content = models.JSONField(blank=True, default=dict)\r\n\r\n\r\nclass Customization(models.Model):\r\n    customisation_id = models.OneToOneField(Employee, on_delete=models.CASCADE, primary_key=True,\r\n                                            related_name='customization')\r\n    color_scheme = models.CharField(max_length=40, default='')\r\n    font_size = models.CharField(max_length=40, default='')\r\n    background = models.CharField(max_length=40, default='')\r\n\r\n\r\nclass Task(models.Model):\r\n    project_id = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='tasks')\r\n    title = models.CharField(max_length=40)\r\n    text = models.TextField(blank=True, null=True)\r\n    parent_id = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE, related_name='childs')\r\n    json_with_employee_info = models.JSONField(blank=True, default=dict)\r\n    user_category = models.ManyToManyField('Category', through='Taskboard', related_name='tasks')\r\n\r\n    class Meta:\r\n        ordering = ['project_id', 'title']\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('team:task', kwargs={'company_id': self.project_id.company_id.id,\r\n                                            'project_id': self.project_id.id,\r\n                                            'task_id': self.id})\r\n\r\n\r\nclass TaskImage(models.Model):\r\n    image = models.ImageField(upload_to='images/%Y/%m/%d/%H/')\r\n    task_id = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='images')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'task_id'\r\n\r\n\r\nclass TaskFile(models.Model):\r\n    file = models.ImageField(upload_to='files/%Y/%m/%d/%H/')\r\n    task_id = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='files')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'task_id'\r\n\r\n\r\nclass Subtasks(models.Model):\r\n    task_id = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='subtasks')\r\n    title = models.CharField(max_length=40)\r\n    text = models.TextField(blank=True, null=True)\r\n    status_yes_no = models.BooleanField(default=False)\r\n    json_with_employee_info = models.JSONField(blank=True, default=dict)\r\n\r\n    class Meta:\r\n        ordering = ['task_id', 'title']\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('team:subtask', kwargs={'company_id': self.task_id.project_id.company_id.id,\r\n                                               'project_id': self.task_id.project_id.id,\r\n                                               'task_id': self.task_id.id,\r\n                                               'subtask_id': self.id})\r\n\r\n\r\nclass SubtaskImage(models.Model):\r\n    image = models.ImageField(upload_to='images/%Y/%m/%d/%H/')\r\n    subtask_id = models.ForeignKey(Subtasks, on_delete=models.CASCADE, related_name='images')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'subtask_id'\r\n\r\n\r\nclass SubtaskFile(models.Model):\r\n    file = models.ImageField(upload_to='images/%Y/%m/%d/%H/')\r\n    subtask_id = models.ForeignKey(Subtasks, on_delete=models.CASCADE, related_name='files')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'subtask_id'\r\n\r\n\r\nclass Category(models.Model):\r\n    title = models.CharField(max_length=40)\r\n    employee_id = models.ForeignKey(Employee, null=True, on_delete=models.CASCADE, related_name='categories')\r\n    project_personal_notes = models.TextField(blank=True, null=True)\r\n\r\n    class Meta:\r\n        ordering = ['title']\r\n        unique_together = ['title', 'employee_id']\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\n\r\nclass UserProjectTime(models.Model):\r\n    json_with_time_and_name_info = models.JSONField(blank=True, default=dict)\r\n\r\n\r\nclass Taskboard(models.Model):\r\n    category_id = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='taskboards')\r\n    task_id = models.ForeignKey(Task, on_delete=models.CASCADE)\r\n    title = models.CharField(max_length=40)\r\n    task_personal_notes = models.JSONField(blank=True, default=dict)\r\n    json_with_subtask_and_subtask_personal_note = models.JSONField(blank=True, default=dict)\r\n\r\n    class Meta:\r\n        ordering = ['title']\r\n\r\n\r\nclass CompanyEvent(models.Model):\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='events')\r\n    title = models.CharField(max_length=40)\r\n    description = models.TextField(blank=True, null=True)\r\n    json_with_employee_info = models.JSONField(blank=True, default=dict)\r\n    time_start = models.DateTimeField()\r\n    time_end = models.DateTimeField()\r\n\r\n    class Meta:\r\n        ordering = ['-time_start']\r\n\r\n\r\nclass CompanyEventImage(models.Model):\r\n    image = models.ImageField(upload_to='images/%Y/%m/%d/%H/')\r\n    company_event = models.ForeignKey(CompanyEvent, on_delete=models.CASCADE, related_name='images')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'company_event'\r\n\r\n\r\nclass CompanyEventFile(models.Model):\r\n    file = models.FileField(upload_to='files/%Y/%m/%d/%H/')\r\n    company_event = models.ForeignKey(CompanyEvent, on_delete=models.CASCADE, related_name='files')\r\n\r\n    class Meta:\r\n        order_with_respect_to = 'company_event'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/models.py b/team/models.py
--- a/team/models.py	(revision 2e55cf822a35442111aa0b17c45067d061852431)
+++ b/team/models.py	(date 1708941992905)
@@ -150,7 +150,6 @@
 class EmployeeCompany(models.Model):
     company_id = models.ForeignKey(Company, on_delete=models.CASCADE)
     employee_id = models.ForeignKey(Employee, on_delete=models.CASCADE)
-    # возможно models.SET_NULL не лучшая идея
     position_id = models.ForeignKey(Positions, on_delete=models.SET_NULL, null=True, blank=True)
     department_id = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, blank=True)
 
@@ -191,6 +190,7 @@
     parent_id = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE, related_name='childs')
     json_with_employee_info = models.JSONField(blank=True, default=dict)
     user_category = models.ManyToManyField('Category', through='Taskboard', related_name='tasks')
+    status = models.CharField(max_length=40)
 
     class Meta:
         ordering = ['project_id', 'title']
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>argon2-cffi==23.1.0\r\nargon2-cffi-bindings==21.2.0\r\nasgiref==3.7.2\r\nattrs==23.2.0\r\nautobahn==23.6.2\r\nAutomat==22.10.0\r\ncffi==1.16.0\r\nchannels==4.0.0\r\nchannels-redis==4.2.0\r\nconstantly==23.10.4\r\ncryptography==42.0.5\r\ndaphne==4.1.0\r\nDjango==4.2.6\r\nhyperlink==21.0.0\r\nidna==3.6\r\nincremental==22.10.0\r\nmsgpack==1.0.7\r\nPillow==10.1.0\r\npsycopg2==2.9.9\r\npyasn1==0.5.1\r\npyasn1-modules==0.3.0\r\npycparser==2.21\r\npyOpenSSL==24.0.0\r\nredis==5.0.1\r\nservice-identity==24.1.0\r\nsix==1.16.0\r\nsqlparse==0.4.4\r\nTwisted==23.10.0\r\ntwisted-iocpsupport==1.0.4\r\ntxaio==23.1.1\r\ntyping_extensions==4.9.0\r\ntzdata==2023.3\r\nzope.interface==6.2\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 2e55cf822a35442111aa0b17c45067d061852431)
+++ b/requirements.txt	(date 1708941003903)
@@ -11,6 +11,7 @@
 cryptography==42.0.5
 daphne==4.1.0
 Django==4.2.6
+django-debug-toolbar==4.3.0
 hyperlink==21.0.0
 idna==3.6
 incremental==22.10.0
Index: QuickHub/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"QuickHub URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('team/', include('team.urls', namespace='team')),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/QuickHub/urls.py b/QuickHub/urls.py
--- a/QuickHub/urls.py	(revision 2e55cf822a35442111aa0b17c45067d061852431)
+++ b/QuickHub/urls.py	(date 1708941316271)
@@ -19,4 +19,5 @@
 urlpatterns = [
     path('admin/', admin.site.urls),
     path('team/', include('team.urls', namespace='team')),
+    path("__debug__/", include("debug_toolbar.urls")),
 ]
