Index: team/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\nfrom django.db.models.base import Model as Model\r\nfrom django.db.models.query import QuerySet\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth import login, logout, authenticate\r\nfrom django.views.generic import ListView, DetailView\r\nfrom django.views.generic.edit import FormView\r\nfrom django.urls import reverse_lazy, reverse\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\nfrom django.core.paginator import Paginator\r\nfrom django.db.models import Q\r\nfrom django.db import IntegrityError\r\nfrom . import forms, models, utils, permissions\r\n\r\n\r\nclass CreateCompany(utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.CompanyCreationForm\r\n\r\n    def form_valid(self, form):\r\n        company = form.save(commit=False)\r\n        company.owner_id = self.request.user.id\r\n        company.save()\r\n        utils.add_new_employee(company.id, self.request.user.id)\r\n        return super().form_valid(company)\r\n\r\n\r\nclass CreateProject(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.ProjectCreationForm\r\n\r\n    def form_valid(self, form):\r\n        project = form.save(commit=False)\r\n        project.project_creater = self.request.user.id\r\n        project.company_id = self.kwargs['company']\r\n        form.save()\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateTask(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.TaskCreationForm\r\n\r\n    def dispatch(self, request, *args, **kwargs):\r\n        try:\r\n            self.kwargs['user'] = models.Employee.objects.get(id=self.request.user.id)\r\n        except ObjectDoesNotExist:\r\n            return redirect(reverse_lazy('team:homepage'))\r\n\r\n        return super().dispatch(request, *args, **kwargs)\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        kwargs['project_id'] = self.kwargs['project']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        task = models.Task()\r\n        task.json_with_employee_info = {\r\n            'appoint': [self.kwargs['user'].email],\r\n            'responsible': [i.email for i in form.cleaned_data.get('responsible')],\r\n            'executor': [i.email for i in form.cleaned_data.get('executor')]\r\n        }\r\n        task.project_id = self.kwargs['project']\r\n        task.text = form.cleaned_data.get('text')\r\n        task.title = form.cleaned_data.get('title')\r\n        task.save()\r\n\r\n        self.kwargs['user'].tasks.add(task)\r\n\r\n        for f in self.request.FILES.getlist('files'): models.TaskFile.objects.create(file=f, task_id=task)\r\n        for i in self.request.FILES.getlist('images'): models.TaskImage.objects.create(image=i, task_id=task)\r\n        return super().form_valid(task)\r\n\r\n\r\nclass CreateSubtask(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.SubtaskCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        subtask = models.Subtasks()\r\n        subtask.json_with_employee_info = {\r\n            'appoint': [self.request.user.email],\r\n            'responsible': [i.email for i in form.cleaned_data.get('responsible')],\r\n            'executor': [i.email for i in form.cleaned_data.get('executor')]\r\n        }\r\n        subtask.task_id_id = self.kwargs['task_id']\r\n        subtask.text = form.cleaned_data.get('text')\r\n        subtask.title = form.cleaned_data.get('title')\r\n        subtask.save()\r\n        for f in self.request.FILES.getlist('files'): models.SubtaskFile.objects.create(file=f, subtask_id=subtask)\r\n        for i in self.request.FILES.getlist('images'): models.SubtaskImage.objects.create(image=i, subtask_id=subtask)\r\n        return super().form_valid(subtask)\r\n\r\n\r\nclass ChoiceParameters(permissions.CompanyAccess, FormView):\r\n    login_url = reverse_lazy('team:login')\r\n    template_name = 'team/main_functionality/choice_parameters.html'\r\n    form_class = forms.ChoiceEmployeeParametersForm\r\n\r\n    def get_success_url(self):\r\n        return reverse_lazy('team:check_employee', kwargs={'company_id': self.kwargs['company_id']})\r\n\r\n    def form_valid(self, form):\r\n        self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"] = []\r\n        for item, flag in form.cleaned_data.items():\r\n            if flag: self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"].append(item)\r\n            self.request.user.save()\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateCategory(utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.CategoryCreationForm\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.success_url = reverse_lazy('team:taskboard')\r\n\r\n    def form_valid(self, form):\r\n        try:\r\n            category = form.save(commit=False)\r\n            category.title = form.cleaned_data.get('title')\r\n            category.employee_id = models.Employee.objects.get(id=self.request.user.id)\r\n            category.project_personal_notes = form.cleaned_data.get('project_personal_notes')\r\n            category.save()\r\n        except:\r\n            return redirect(reverse_lazy('team:create_category'))\r\n        return super().form_valid(category)\r\n\r\n\r\nclass CreatePosition(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.PositionCreationForm\r\n\r\n    def form_valid(self, form):\r\n        position = form.save(commit=False)\r\n        position.company_id = self.kwargs['company']\r\n        position.json_with_optional_info = {'text': form.cleaned_data.get('text')}\r\n        position.save()\r\n        return super().form_valid(position)\r\n\r\n\r\nclass CreateCompanyEvent(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.CompanyEventCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        company_event = models.CompanyEvent()\r\n        company_event.company = self.kwargs['company']\r\n        company_event.title = form.cleaned_data.get('title')\r\n        company_event.description = form.cleaned_data.get('description')\r\n        company_event.json_with_employee_info = {\r\n            'present_employees': [employee.email for employee in form.cleaned_data.get('present_employees')]\r\n        }\r\n        company_event.time_end = form.cleaned_data.get('time_end')\r\n        company_event.time_start = form.cleaned_data.get('time_start')\r\n        company_event.save()\r\n\r\n        for f in self.request.FILES.getlist('files'): models.CompanyEventFile.objects.create(file=f,\r\n                                                                                             company_event=company_event)\r\n        for i in self.request.FILES.getlist('images'): models.CompanyEventImage.objects.create(image=i,\r\n                                                                                               company_event=company_event)\r\n\r\n        return super().form_valid(form)\r\n\r\n\r\nclass CreateDepartment(utils.ModifiedDispatch, utils.CreatorMixin, permissions.CompanyAccess, FormView):\r\n    form_class = forms.DepartmentCreationForm\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['company_id'] = self.kwargs['company']\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        department = models.Department()\r\n        try:\r\n            department.company_id = self.kwargs['company']\r\n            department.title = form.cleaned_data.get('title')\r\n            department.parent_id = form.cleaned_data.get('parent')\r\n            department.supervisor = form.cleaned_data.get('supervisor')\r\n            department.save()\r\n        except IntegrityError:\r\n            return redirect('team:create_department',\r\n                            company_id=self.kwargs['company_id'])\r\n\r\n        employees = list(form.cleaned_data.get('employees'))\r\n        if not department.supervisor in employees:\r\n            employees += [department.supervisor]\r\n\r\n        for employee in employees:\r\n            employee_company = models.EmployeeCompany.objects \\\r\n                .filter(employee_id=employee,\r\n                        company_id=self.kwargs['company'])\r\n            # т.к. on_delete=models.SET_NULL, то при удалении департамента может возникнуть много\r\n            # записей об одном работнике с пустыми полями отдела\r\n            employee_without_department = employee_company.filter(department_id=None)\r\n            if employee_without_department:\r\n                employee_without_department[0].department_id = department  # если есть запись о работнике с незаполненным полем отдела,\r\n                employee_without_department[0].save()  # тогда просто заполняется поле отдела в уже существующей записи\r\n            else:\r\n                employee_company = models.EmployeeCompany()\r\n                employee_company.company_id = self.kwargs['company']\r\n                employee_company.employee_id = employee\r\n                employee_company.department_id = department     # если же во всех записях работник уже прикреплён к отделу, \r\n                employee_company.save()                         # создаётся новая запись в таблице EmployeeCompany\r\n        return super().form_valid(department)\r\n\r\n\r\nclass CreateTaskboard(utils.ModifiedDispatch, utils.CreatorMixin, LoginRequiredMixin, FormView):\r\n    form_class = forms.TaskboardCreationForm\r\n\r\n    def dispatch(self, request, *args, **kwargs):\r\n        try:\r\n            self.kwargs['user'] = models.Employee.objects.get(id=self.request.user.id)\r\n        except ObjectDoesNotExist:\r\n            return redirect(reverse_lazy('team:homepage'))\r\n        return super().dispatch(request, *args, **kwargs)\r\n\r\n    def get_form_kwargs(self):\r\n        kwargs = super().get_form_kwargs()\r\n        kwargs['emp_id'] = self.kwargs['user'].id\r\n        return kwargs\r\n\r\n    def form_valid(self, form):\r\n        tasks = self.kwargs['user'].tasks \\\r\n            .filter(id__in=form.cleaned_data.get('tasks'))\r\n        category = form.cleaned_data.get('category')\r\n\r\n        for task in tasks:\r\n            taskboard = models.Taskboard(category_id=category,\r\n                                         task_id=task,\r\n                                         title=category.title,\r\n                                         task_personal_notes={\r\n                                             'notes': form.cleaned_data.get('text'),\r\n                                             'task_notes': task.text\r\n                                         })\r\n            subtasks = task.subtasks.all()\r\n            for subtask in subtasks:\r\n                taskboard.json_with_subtask_and_subtask_personal_note[subtask.id] = subtask.text\r\n            taskboard.save()\r\n        return super().form_valid(form)\r\n\r\n'''Классы отображений'''\r\n\r\nclass CheckEmployee(utils.ModifiedDispatch, permissions.CompanyAccess, ListView):\r\n    template_name = 'team/main_functionality/view_company_employees.html'\r\n    model = models.Employee\r\n    paginate_by = 10\r\n    login_url = reverse_lazy('team:login')\r\n\r\n    def get_queryset(self):\r\n        info_filter_about_employee = self.request.user.json_with_settings_info[\"settings_info_about_company_employee\"]\r\n        # employees = models.Employee.objects.filter(\r\n        #     id__in=models.EmployeeCompany.objects.filter(company_id=self.kwargs['company_id']).values('employee_id'))\r\n        company = self.kwargs['company']\r\n        employees = company.employees.distinct()\r\n\r\n        info_about_employees = []\r\n        for employee in employees:\r\n            info_about_employee = dict(\r\n                filter(lambda x: x[0] in info_filter_about_employee, employee.get_all_info().items()))\r\n            for link in employee.links.distinct():\r\n                if link.title in info_filter_about_employee:\r\n                    info_about_employee.update(link.get_info())\r\n\r\n            if 'position_title' in info_filter_about_employee:\r\n                # position = models.Positions.objects.filter(\r\n                #     id__in=models.EmployeeCompany.objects.filter(Q(employee_id=employee.id) & Q(company_id= self.kwargs['company_id'])))\r\n                position = employee.positions.filter(company_id=company)\r\n                if position:\r\n                    position = position[0].title\r\n                else:\r\n                    position = None\r\n                info_about_employee.update({'position_title': position})\r\n\r\n            if 'department' in info_filter_about_employee:\r\n                # department = models.Department.objects.filter(\r\n                #     id__in=models.EmployeeCompany.objects.filter(Q(employee_id=employee.id) & Q(company_id=self.kwargs['company_id']))\r\n                # )\r\n                department = employee.departments.filter(company_id=company)\r\n                if department:\r\n                    department = department[0].title\r\n                else:\r\n                    department = None\r\n                info_about_employee.update({'department': department})\r\n\r\n            info_about_employees.append(info_about_employee)\r\n        # paginator = Paginator(info_about_employees, 1)\r\n        # page_number = self.request.GET.get('page')\r\n        # page_obj = paginator.get_page(page_number)\r\n        return info_about_employees\r\n\r\n\r\nclass TaskboardListView(LoginRequiredMixin, ListView):\r\n    model = models.Employee\r\n    template_name = 'team/main_functionality/taskboard.html'\r\n\r\n\r\nclass ProjectsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Project\r\n    template_name = 'team/main_functionality/projects.html'\r\n    context_object_name = 'projects'\r\n\r\n    def get_queryset(self):\r\n        return self.kwargs['company'].projects.all()\r\n\r\n\r\nclass DepartmentsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Department\r\n    template_name = 'team/main_functionality/departments.html'\r\n    context_object_name = 'departments'\r\n\r\n    def get_queryset(self):\r\n        return self.kwargs['company'].departments.all()\r\n\r\n\r\nclass PositionsListView(permissions.CompanyAccess, utils.ModifiedDispatch, ListView):\r\n    model = models.Positions\r\n    template_name = 'team/main_functionality/view_positions.html'\r\n    context_object_name = 'positions'\r\n    \r\n    def get_queryset(self):\r\n        return self.kwargs['company'].positions.all()\r\n\r\n\r\nclass UserCompaniesListView(utils.ModifiedDispatch, LoginRequiredMixin, ListView):\r\n    model = models.Company\r\n    template_name = 'team/main_functionality/user_companies.html'\r\n    context_object_name = 'companies'\r\n\r\n    def get_queryset(self):\r\n        return self.request.user.companies.distinct() \r\n\r\n\r\nclass DepartmentDetailView(permissions.CompanyAccess, DetailView):\r\n    model = models.Department\r\n    template_name = 'team/main_functionality/view_department.html'\r\n    context_object_name = 'department'\r\n    pk_url_kwarg = 'department_id'\r\n\r\n\r\nclass TaskDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Task\r\n    template_name = 'team/main_functionality/view_task.html'\r\n    context_object_name = 'task'\r\n    pk_url_kwarg = 'task_id'\r\n    \r\n\r\nclass SubtaskDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Subtasks\r\n    template_name = 'team/main_functionality/view_subtask.html'\r\n    context_object_name = 'subtask'\r\n    pk_url_kwarg = 'subtask_id'\r\n\r\n\r\nclass ProjectDetailView(utils.ModifiedDispatch, permissions.CompanyAccess, DetailView):\r\n    model = models.Project\r\n    template_name = 'team/main_functionality/view_project.html'\r\n    context_object_name = 'project'\r\n    pk_url_kwarg = 'project_id'\r\n\r\n\r\ndef sign_up(request):\r\n    if request.method == 'POST':\r\n        form = forms.CustomUserCreationFrom(request.POST)\r\n        if form.is_valid():\r\n            user = form.save()\r\n            user.json_with_settings_info = utils.create_base_settings_json_to_employee()\r\n            user.save()\r\n\r\n            models.Category.objects.create(title='Мои задачи', employee_id=user)\r\n            login(request, user)\r\n            return redirect(reverse_lazy('team:homepage'))\r\n    else:\r\n        form = forms.CustomUserCreationFrom()\r\n\r\n    context = {'form': form}\r\n    return render(request, 'registration/sign_up.html', context)\r\n\r\n\r\n@login_required(login_url=reverse_lazy('team:login'))\r\ndef homepage(request):\r\n    return render(request, 'team/main_functionality/homepage.html')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/views.py b/team/views.py
--- a/team/views.py	(revision 3048d41f7fd8a6fe35098c340531537158f0b366)
+++ b/team/views.py	(date 1709034399971)
@@ -367,6 +367,13 @@
     pk_url_kwarg = 'project_id'
 
 
+class UserProfile(permissions.CompanyAccess, DetailView):
+    model = models.Employee
+    context_object_name = 'employee'
+
+
+
+
 def sign_up(request):
     if request.method == 'POST':
         form = forms.CustomUserCreationFrom(request.POST)
Index: team/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom django.contrib.auth import views as auth_views\r\nfrom . import views\r\n\r\napp_name = 'team'\r\n\r\nurlpatterns = [\r\n    path('', views.homepage, name='homepage'),\r\n    # авторизация\r\n    path('sign-up/', views.sign_up, name='sign_up'),\r\n    path('login/', auth_views.LoginView.as_view(), name='login'),\r\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\r\n    # создание\r\n    path('create/company/', views.CreateCompany.as_view(), name='create_company'),\r\n    path('create/<int:company_id>/project/', views.CreateProject.as_view(), name='create_project'),\r\n    path('create/<int:company_id>/<int:project_id>/task', views.CreateTask.as_view(), name='create_task'),\r\n    path('create/<int:company_id>/<int:project_id>/<int:task_id>/subtask', views.CreateSubtask.as_view(), name='create_subtask'),\r\n    path('create/category', views.CreateCategory.as_view(), name='create_category'),\r\n    path('create/<int:company_id>/department', views.CreateDepartment.as_view(), name='create_department'),\r\n    path('create/taskboard', views.CreateTaskboard.as_view(), name='create_taskboard'),\r\n    path('create/<int:company_id>/position', views.CreatePosition.as_view(), name='create_position'),\r\n    path('create/<int:company_id>/company-event', views.CreateCompanyEvent.as_view(), name='create_company_event'),\r\n    # отображение\r\n    path('<int:company_id>/check-employee', views.CheckEmployee.as_view(), name='check_employee'),\r\n    path('<int:company_id>/check-employee/choice-parameters', views.ChoiceParameters.as_view(), name='choice_parameters'),\r\n    # Детальные отображения\r\n    path('<int:company_id>/project/<int:project_id>/', views.ProjectDetailView.as_view(), name='project'),\r\n    path('<int:company_id>/department/<int:department_id>/', views.DepartmentDetailView.as_view(), name='department'),\r\n    path('<int:company_id>/<int:project_id>/<int:task_id>/', views.TaskDetailView.as_view(), name='task'),\r\n    path('<int:company_id>/<int:project_id>/<int:task_id>/<int:subtask_id>', views.SubtaskDetailView.as_view(), name='subtask'),\r\n    # Списки\r\n    path('<int:company_id>/projects/', views.ProjectsListView.as_view(), name='projects_list'),\r\n    path('<int:company_id>/positions/', views.PositionsListView.as_view(), name='positions_list'),\r\n    path('<int:company_id>/departments/', views.DepartmentsListView.as_view(), name='departments_list'),\r\n    path('taskboard', views.TaskboardListView.as_view(), name='taskboard'),\r\n    path('companies/', views.UserCompaniesListView.as_view(), name='companies'),\r\n    # Редактирование\r\n    path('edit/<int:company_id>/<int:project_id>/<int:task_id>/', views.CreateTask.as_view(), name='set_deadline'),\r\n    path('edit/taskboard/<int:category_id>/', views.CreateTaskboard.as_view(), name='add_task'),\r\n\r\n    # ещё не готово\r\n    path('projects/', views.homepage, name='projects'),\r\n    path('settings/', views.homepage, name='settings'),\r\n    path('help/', views.homepage, name='help'),\r\n    path('me/', views.homepage, name='me'),\r\n    path('chat/', views.homepage, name='chat'),\r\n    path('notifications/', views.homepage, name='notifications'),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/urls.py b/team/urls.py
--- a/team/urls.py	(revision 3048d41f7fd8a6fe35098c340531537158f0b366)
+++ b/team/urls.py	(date 1709033645525)
@@ -23,6 +23,7 @@
     # отображение
     path('<int:company_id>/check-employee', views.CheckEmployee.as_view(), name='check_employee'),
     path('<int:company_id>/check-employee/choice-parameters', views.ChoiceParameters.as_view(), name='choice_parameters'),
+    path('profile', views.user_profile, name='user_profile'),
     # Детальные отображения
     path('<int:company_id>/project/<int:project_id>/', views.ProjectDetailView.as_view(), name='project'),
     path('<int:company_id>/department/<int:department_id>/', views.DepartmentDetailView.as_view(), name='department'),
Index: team/templates/team/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load static %}\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <link href=\"{% static 'css/style0.css' %}\" rel=\"stylesheet\">\r\n    <link href=\"{% static 'css/header.css' %}\" rel=\"stylesheet\">\r\n    <link href=\"{% static 'css/left_menu.css' %}\" rel=\"stylesheet\">\r\n    <link href=\"{% static 'css/main_part.css' %}\" rel=\"stylesheet\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Manrope:wght@400;500&display=swap\" rel=\"stylesheet\">\r\n    <title>{% block title %}{% endblock %}</title>\r\n</head>\r\n<body class=\"body\">\r\n\t<div class=\"wrapper\">\r\n\t\t<div class=\"header\">\r\n\t\t\t<div class=\"header_1\">\r\n\t\t\t\t<div class=\"btn_burger\">\r\n\t\t\t\t\t<button class=\"button_burger\">\r\n\t\t\t\t\t\t<img src=\"{% static 'img/header/burger.svg'%}\" alt=\"\">\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"logo_header_of_quickbub\">\r\n\t\t\t\t\t<a href=\"{% url 'team:homepage' %}\">\r\n\t\t\t\t\t\t<img src=\"{% static 'img/header/logo.svg' %}\" alt=\"\">\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"name_header_of_quickhub\">\r\n\t\t\t\t\tQuickHub\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"edit_for_search_button closed_1\">\r\n\t\t\t\t\t<div class=\"edit_search_body\">\r\n\t\t\t\t\t\t<img src=\"{% static 'img/header/header_search.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t<div class=\"line_edit_search\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"search_of_header w50\"\r\n\t\t\t\t\t\t\tplaceholder=\"Поиск\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"header_2\">\r\n\t\t\t\t<div class=\"notifications_of_profile\">\r\n\t\t\t\t\t<a href=\"{% url 'team:notifications' %}\">\r\n\t\t\t\t\t\t<button class=\"btn_notifications\">\r\n\t\t\t\t\t\t\t<img src=\"{% static 'img/header/notifications.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"messages_of_profile\">\r\n\t\t\t\t\t<a href=\"{% url 'team:chat' %}\">\r\n\t\t\t\t\t\t<button class=\"btn_messages\">\r\n\t\t\t\t\t\t\t<img src=\"{% static 'img/header/messages.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"profile_options_donw\">\r\n\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:login' %}\">\r\n\t\t\t\t\t\t<div class=\"body_of_options_profile\">\r\n\t\t\t\t\t\t\t<div class=\"icon_of_profile_header\">\r\n\t\t\t\t\t\t\t\t<img src=\"{% static 'img/header/icon_of_profile.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"name_of_person\">\r\n\t\t\t\t\t\t\t\t{% block userbar %}\r\n\t\t\t\t\t\t\t\t\t{% if request.user %}\r\n\t\t\t\t\t\t\t\t\t\t{{ request.user.name }}\r\n\t\t\t\t\t\t\t\t\t{%endif%}\r\n\t\t\t\t\t\t\t\t{% endblock %}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"button_options_down\">\r\n\t\t\t\t\t\t\t\t<button class=\"btn_down_options\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/header/arrow_down.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"main\">\r\n\t\t\t<div class=\"left_menu _w200\">\r\n\t\t\t\t<nav class=\"sub_menu_left _w200\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li class=\"left_menu_item_body\">\r\n\t\t\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:taskboard' %}\">\r\n\t\t\t\t\t\t\t\t<button class=\"1\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/left_menu/my_tasks.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"text_on_left_menu _show\">\r\n\t\t\t\t\t\t\t\t\t\tМои задачи\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"left_menu_item_body\">\r\n\t\t\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:projects' %}\">\r\n\t\t\t\t\t\t\t\t<button class=\"2\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/left_menu/projects.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"text_on_left_menu _show\">\r\n\t\t\t\t\t\t\t\t\t\tПроекты\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"left_menu_item_body\">\r\n\t\t\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:companies' %}\">\r\n\t\t\t\t\t\t\t\t<button class=\"3\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/left_menu/companies.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"text_on_left_menu _show\">\r\n\t\t\t\t\t\t\t\t\t\tКомпании\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"left_menu_item_body\">\r\n\t\t\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:settings' %}\">\r\n\t\t\t\t\t\t\t\t<button class=\"4\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/left_menu/settings.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"text_on_left_menu _show\">\r\n\t\t\t\t\t\t\t\t\t\tНастройки\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li class=\"left_menu_item_body\">\r\n\t\t\t\t\t\t\t<a class=\"button\" href=\"{% url 'team:help' %}\">\r\n\t\t\t\t\t\t\t\t<button class=\"5\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"{% static 'img/left_menu/support.svg' %}\" alt=\"\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"text_on_left_menu _show\">\r\n\t\t\t\t\t\t\t\t\t\tПоддержка\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"place_for_work\">\r\n\t\t\t\t{% block content %}\r\n                {%endblock%}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<script src=\"{% static 'js/menu_left_hide.js' %}\"></script>\r\n\t<script src=\"{% static 'js/header_search.js' %}\"></script>\r\n\t<script src=\"{% static 'js/online_status.js' %}\"></script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/team/templates/team/base.html b/team/templates/team/base.html
--- a/team/templates/team/base.html	(revision 3048d41f7fd8a6fe35098c340531537158f0b366)
+++ b/team/templates/team/base.html	(date 1709033435886)
@@ -21,7 +21,7 @@
 					</button>
 				</div>
 				<div class="logo_header_of_quickbub">
-					<a href="{% url 'team:homepage' %}">
+					<a href="{% url 'team:user_profile' %}">
 						<img src="{% static 'img/header/logo.svg' %}" alt="">
 					</a>
 				</div>
